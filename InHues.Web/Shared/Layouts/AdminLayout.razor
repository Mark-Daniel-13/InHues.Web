@using InHues.Components.Layout
@using InHues.Components.ViewModels;
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@layout BlankLayout
<section id="main">
    <RadzenLayout>
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                    <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                    <RadzenLabel Text="@headerName" />
                </RadzenStack>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0" JustifyContent="JustifyContent.End">
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center" Gap="0">
                        <RadzenText class="rz-text-capitalize mb-0 text-white mx-3" Style="font-weight:bold" TextStyle="TextStyle.H6">Admin</RadzenText>
                    </RadzenStack>

                    <RadzenProfileMenu Style="display:flex;align-items:center">
                        <Template>
                            <RadzenGravatar Email="@AppState.CurrentUser?.Email" />
                        </Template>
                        <ChildContent>
                            <div @onclick="LogOut">
                                <RadzenProfileMenuItem Text="Logout" Icon="logout"></RadzenProfileMenuItem>
                            </div>
                        </ChildContent>
                    </RadzenProfileMenu>
                </RadzenStack>
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebarExpanded">
            <div class="d-flex align-items-center pe-3">
                <img src="/img/InHuesLogo.svg" class="img-host-logo m-1" style="height:90px;width:100%;object-fit:contain">
            </div>
            <RadzenPanelMenu Click="@(args => OnMenuClicked(args))">
                <RadzenPanelMenuItem Icon="dashboard" Text="Dashboard" @onclick="@(()=>OnSideBarItemmClicked("dashboard"))" />
                <RadzenPanelMenuItem Icon="card_membership" Text="Customers" @onclick="@(()=>OnSideBarItemmClicked("customers"))" />
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div id="main-content" class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>
@*    <SideBar StickySideBar SelectedItem="@(AppState.SelectedSidebarItem)">
        <SidebarItems>
            <SidebarItem ModuleIndex="1" Icon="dashboard" Text="Dashboard" Name="Dashboard" OnItemClick="@(()=>OnSideBarItemmClicked("dashboard"))" />
            <SidebarItem ModuleIndex="1" Icon="card_membership" Text="Customers" Name="Customers" OnItemClick="@(()=>OnSideBarItemmClicked("customers"))" />
        </SidebarItems>
    </SideBar>
    <div id="main-content">
        @Body
    </div>*@

</section>

@code {

    [Inject] AuthenticationStateProvider? AuthProvider { get; set; }
    [Inject] NavigationManager? navigationManager { get; set; }
    [Inject] IAuthService? _authService { get; set; }
    bool sidebarExpanded = false;
    string headerName = "Dashboard";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (navigationManager is null || AuthProvider is null) return;
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var roles = authState.User.FindAll(x => x.Type == "role");

        if (!roles.Any(x => x.Value == "Administrator"))
        {
            navigationManager.NavigateTo("/");
        }
    }

    private void OnSideBarItemmClicked(string name)
    {
        if (navigationManager is null) return;
        AppState.SetSidebarItem(name);
        switch (name)
        {
            case "dashboard":
                navigationManager.NavigateTo("/Admin/Dashboard");
                break;
            case "customers":
                navigationManager.NavigateTo("/Admin/Customers");
                break;
        }
    }

    private void OnMenuClicked(MenuItemEventArgs e)
    {
        if (navigationManager is null) return;
        var menuName = e.Text;
        switch (menuName.ToLower())
        {
            case "dashboard":
                navigationManager.NavigateTo("/Admin/Dashboard");
                headerName = "Dashboard";
                break;
            case "customers":
                navigationManager.NavigateTo("/Admin/Customers");
                headerName = "Customers";
                break;
        }
        sidebarExpanded = !sidebarExpanded;
        StateHasChanged();
    }

    private async Task LogOut()
    {
        if (_authService is null) return;
        await _authService.LogoutAsync();
    }
}