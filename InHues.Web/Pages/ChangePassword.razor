@page "/ChangePassword/{Email}/{Key}"
@using InHues.Domain.DTO.V1.Identity.Request;
<PageTitle>Change Password</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height:100vh" class="front-page">
    <div class="rz-shadow-2 px-2">
        <div class="logo-container">
            <img src="/img/dermtrics_logo.png" class="img-host-logo">
        </div>

        <p class="dt-12 text-center mb-0"><strong>Create a new password</strong></p>
        <p class="dt-10 text-center">Enter your email address and we'll send you a link to reset your password.</p>

        <RadzenTemplateForm TItem="ResetPasswordRequest" Data="@Request" Submit="ResetPass">
            <RadzenStack Class="rz-p-4 rz-p-md-4">

                <RadzenFormField Text="New Password" Variant="Variant.Outlined" Style="width: 100%;">
                    <ChildContent>
                        <RadzenPassword Placeholder="New Password" Name="password" @bind-Value="Request.NewPassword" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="password" Text="Enter password" Popup="true" Style="position: relative" />
                        <RadzenRegexValidator Component="password" Text="Password must be greater than 6 character, is alphaNumeric and should have special character" Pattern="@pattern" Popup=true Style="position: relative" />
                    </Helper>
                </RadzenFormField>

                <RadzenFormField Text="Confirm Password" Variant="Variant.Outlined" Style="width: 100%;">
                    <ChildContent>
                        <RadzenPassword Placeholder="Confirm Password" Name="cpassword" @bind-Value="ConfirmPassword" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="cpassword" Text="Enter confirm password" Popup="true" Style="position: relative" />
                        <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(ConfirmPassword)) Value=@Request.NewPassword Component="cpassword" Text="Passwords should be the same" Popup=true Style="position: relative" />
                    </Helper>
                </RadzenFormField>

                <RadzenButton Variant="Variant.Flat" IsBusy="@Submitting" class="primary-bg" ButtonType="ButtonType.Submit" Text="RESET"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>
    </div>
</RadzenStack>
@code {
    [Parameter]
    public string? Email { get; set; }
    [Parameter]
    public string? Key { get; set; }

    [Inject] private IBridge? _bridge { get; set; }
    [Inject] private IAuthService? _authService { get; set; }
    string pattern = "^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{6,}$";

    ResetPasswordRequest Request = new();
    string ConfirmPassword = string.Empty;
    bool Submitting = false;
    bool EmailSent = false;
    async Task ResetPass()
    {
        if (_bridge is null || _authService is null || Submitting) return;

        Submitting = true;
        ResetPasswordRequest _request = new() { Email = Email,NewPassword = Request.NewPassword , ResetKey = Key};
        var query = await _bridge.CommandJsonAsync<string, ResetPasswordRequest>(ApiRoutes.Identity.ResetPasswordRequest, _request, RequestType.POST);
        Submitting = false;
        if (!query.IsSuccess)
        {
            var error = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                    Summary = query?.Errors?.FirstOrDefault(),
                Duration = 1500
            };
            NotifService.Notify(error);
            return;
        };
        

        NotifService.Notify(new()
        {

            Severity = NotificationSeverity.Success,
            Summary = "Success password reset.",
            Duration = 1500
        });
        NavManager.NavigateTo("/");
    }
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Key)) { NavManager.NavigateTo("/"); return; }
        base.OnInitialized();
    }
}